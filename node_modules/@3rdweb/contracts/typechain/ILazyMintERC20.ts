/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ClaimConditionStruct = {
  startTimestamp: BigNumberish;
  maxClaimableSupply: BigNumberish;
  supplyClaimed: BigNumberish;
  waitTimeInSecondsBetweenClaims: BigNumberish;
  merkleRoot: BytesLike;
  pricePerToken: BigNumberish;
  currency: string;
};

export type ClaimConditionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  startTimestamp: BigNumber;
  maxClaimableSupply: BigNumber;
  supplyClaimed: BigNumber;
  waitTimeInSecondsBetweenClaims: BigNumber;
  merkleRoot: string;
  pricePerToken: BigNumber;
  currency: string;
};

export interface ILazyMintERC20Interface extends utils.Interface {
  functions: {
    "claim(address,uint256,bytes32[])": FunctionFragment;
    "setClaimConditions((uint256,uint256,uint256,uint256,bytes32,uint256,address)[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimConditions",
    values: [ClaimConditionStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimConditions",
    data: BytesLike
  ): Result;

  events: {
    "ClaimedTokens(uint256,address,address,uint256)": EventFragment;
    "NewClaimConditions(tuple[])": EventFragment;
    "NewSaleRecipient(address)": EventFragment;
    "PrimarySalesFeeUpdates(uint256)": EventFragment;
    "RoyaltyUpdated(uint256)": EventFragment;
    "TransfersRestricted(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewClaimConditions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSaleRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimarySalesFeeUpdates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersRestricted"): EventFragment;
}

export type ClaimedTokensEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    claimConditionIndex: BigNumber;
    claimer: string;
    receiver: string;
    quantityClaimed: BigNumber;
  }
>;

export type ClaimedTokensEventFilter = TypedEventFilter<ClaimedTokensEvent>;

export type NewClaimConditionsEvent = TypedEvent<
  [ClaimConditionStructOutput[]],
  { claimConditions: ClaimConditionStructOutput[] }
>;

export type NewClaimConditionsEventFilter =
  TypedEventFilter<NewClaimConditionsEvent>;

export type NewSaleRecipientEvent = TypedEvent<[string], { recipient: string }>;

export type NewSaleRecipientEventFilter =
  TypedEventFilter<NewSaleRecipientEvent>;

export type PrimarySalesFeeUpdatesEvent = TypedEvent<
  [BigNumber],
  { newFeeBps: BigNumber }
>;

export type PrimarySalesFeeUpdatesEventFilter =
  TypedEventFilter<PrimarySalesFeeUpdatesEvent>;

export type RoyaltyUpdatedEvent = TypedEvent<
  [BigNumber],
  { newRoyaltyBps: BigNumber }
>;

export type RoyaltyUpdatedEventFilter = TypedEventFilter<RoyaltyUpdatedEvent>;

export type TransfersRestrictedEvent = TypedEvent<
  [boolean],
  { restricted: boolean }
>;

export type TransfersRestrictedEventFilter =
  TypedEventFilter<TransfersRestrictedEvent>;

export interface ILazyMintERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILazyMintERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      receiver: string,
      quantity: BigNumberish,
      proofs: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimConditions(
      _conditions: ClaimConditionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    receiver: string,
    quantity: BigNumberish,
    proofs: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimConditions(
    _conditions: ClaimConditionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      receiver: string,
      quantity: BigNumberish,
      proofs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setClaimConditions(
      _conditions: ClaimConditionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClaimedTokens(uint256,address,address,uint256)"(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      quantityClaimed?: null
    ): ClaimedTokensEventFilter;
    ClaimedTokens(
      claimConditionIndex?: BigNumberish | null,
      claimer?: string | null,
      receiver?: string | null,
      quantityClaimed?: null
    ): ClaimedTokensEventFilter;

    "NewClaimConditions(tuple[])"(
      claimConditions?: null
    ): NewClaimConditionsEventFilter;
    NewClaimConditions(claimConditions?: null): NewClaimConditionsEventFilter;

    "NewSaleRecipient(address)"(
      recipient?: string | null
    ): NewSaleRecipientEventFilter;
    NewSaleRecipient(recipient?: string | null): NewSaleRecipientEventFilter;

    "PrimarySalesFeeUpdates(uint256)"(
      newFeeBps?: null
    ): PrimarySalesFeeUpdatesEventFilter;
    PrimarySalesFeeUpdates(newFeeBps?: null): PrimarySalesFeeUpdatesEventFilter;

    "RoyaltyUpdated(uint256)"(newRoyaltyBps?: null): RoyaltyUpdatedEventFilter;
    RoyaltyUpdated(newRoyaltyBps?: null): RoyaltyUpdatedEventFilter;

    "TransfersRestricted(bool)"(
      restricted?: null
    ): TransfersRestrictedEventFilter;
    TransfersRestricted(restricted?: null): TransfersRestrictedEventFilter;
  };

  estimateGas: {
    claim(
      receiver: string,
      quantity: BigNumberish,
      proofs: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimConditions(
      _conditions: ClaimConditionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      receiver: string,
      quantity: BigNumberish,
      proofs: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimConditions(
      _conditions: ClaimConditionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
