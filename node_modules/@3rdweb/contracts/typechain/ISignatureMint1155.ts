/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type MintRequestStruct = {
  to: string;
  royaltyRecipient: string;
  royaltyBps: BigNumberish;
  primarySaleRecipient: string;
  tokenId: BigNumberish;
  uri: string;
  quantity: BigNumberish;
  pricePerToken: BigNumberish;
  currency: string;
  validityStartTimestamp: BigNumberish;
  validityEndTimestamp: BigNumberish;
  uid: BytesLike;
};

export type MintRequestStructOutput = [
  string,
  string,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  string
] & {
  to: string;
  royaltyRecipient: string;
  royaltyBps: BigNumber;
  primarySaleRecipient: string;
  tokenId: BigNumber;
  uri: string;
  quantity: BigNumber;
  pricePerToken: BigNumber;
  currency: string;
  validityStartTimestamp: BigNumber;
  validityEndTimestamp: BigNumber;
  uid: string;
};

export interface ISignatureMint1155Interface extends utils.Interface {
  functions: {
    "mintTo(address,uint256,string,uint256)": FunctionFragment;
    "mintWithSignature((address,address,uint256,address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
    "verify((address,address,uint256,address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "mintTo",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSignature",
    values: [MintRequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [MintRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "DefaultRoyalty(address,uint256)": EventFragment;
    "MintWithSignature(address,address,uint256,tuple)": EventFragment;
    "NewDefaultRoyaltyRecipient(address)": EventFragment;
    "NewDefaultSaleRecipient(address)": EventFragment;
    "NewOwner(address,address)": EventFragment;
    "PrimarySalesFeeUpdates(uint256)": EventFragment;
    "RoyaltyForToken(uint256,address,uint256)": EventFragment;
    "TokenMinted(address,uint256,string,uint256)": EventFragment;
    "TransfersRestricted(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultRoyalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintWithSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDefaultRoyaltyRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDefaultSaleRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrimarySalesFeeUpdates"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyForToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersRestricted"): EventFragment;
}

export type DefaultRoyaltyEvent = TypedEvent<
  [string, BigNumber],
  { newRoyaltyRecipient: string; newRoyaltyBps: BigNumber }
>;

export type DefaultRoyaltyEventFilter = TypedEventFilter<DefaultRoyaltyEvent>;

export type MintWithSignatureEvent = TypedEvent<
  [string, string, BigNumber, MintRequestStructOutput],
  {
    signer: string;
    mintedTo: string;
    tokenIdMinted: BigNumber;
    mintRequest: MintRequestStructOutput;
  }
>;

export type MintWithSignatureEventFilter =
  TypedEventFilter<MintWithSignatureEvent>;

export type NewDefaultRoyaltyRecipientEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type NewDefaultRoyaltyRecipientEventFilter =
  TypedEventFilter<NewDefaultRoyaltyRecipientEvent>;

export type NewDefaultSaleRecipientEvent = TypedEvent<
  [string],
  { recipient: string }
>;

export type NewDefaultSaleRecipientEventFilter =
  TypedEventFilter<NewDefaultSaleRecipientEvent>;

export type NewOwnerEvent = TypedEvent<
  [string, string],
  { prevOwner: string; newOwner: string }
>;

export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;

export type PrimarySalesFeeUpdatesEvent = TypedEvent<
  [BigNumber],
  { newFeeBps: BigNumber }
>;

export type PrimarySalesFeeUpdatesEventFilter =
  TypedEventFilter<PrimarySalesFeeUpdatesEvent>;

export type RoyaltyForTokenEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { tokenId: BigNumber; royaltyRecipient: string; royaltyBps: BigNumber }
>;

export type RoyaltyForTokenEventFilter = TypedEventFilter<RoyaltyForTokenEvent>;

export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    mintedTo: string;
    tokenIdMinted: BigNumber;
    uri: string;
    quantityMinted: BigNumber;
  }
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export type TransfersRestrictedEvent = TypedEvent<
  [boolean],
  { restricted: boolean }
>;

export type TransfersRestrictedEventFilter =
  TypedEventFilter<TransfersRestrictedEvent>;

export interface ISignatureMint1155 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISignatureMint1155Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintTo(
      to: string,
      tokenId: BigNumberish,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSignature(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verify(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  mintTo(
    to: string,
    tokenId: BigNumberish,
    uri: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSignature(
    req: MintRequestStruct,
    signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verify(
    req: MintRequestStruct,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { success: boolean; signer: string }>;

  callStatic: {
    mintTo(
      to: string,
      tokenId: BigNumberish,
      uri: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSignature(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; signer: string }>;
  };

  filters: {
    "DefaultRoyalty(address,uint256)"(
      newRoyaltyRecipient?: null,
      newRoyaltyBps?: null
    ): DefaultRoyaltyEventFilter;
    DefaultRoyalty(
      newRoyaltyRecipient?: null,
      newRoyaltyBps?: null
    ): DefaultRoyaltyEventFilter;

    "MintWithSignature(address,address,uint256,tuple)"(
      signer?: string | null,
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      mintRequest?: null
    ): MintWithSignatureEventFilter;
    MintWithSignature(
      signer?: string | null,
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      mintRequest?: null
    ): MintWithSignatureEventFilter;

    "NewDefaultRoyaltyRecipient(address)"(
      recipient?: string | null
    ): NewDefaultRoyaltyRecipientEventFilter;
    NewDefaultRoyaltyRecipient(
      recipient?: string | null
    ): NewDefaultRoyaltyRecipientEventFilter;

    "NewDefaultSaleRecipient(address)"(
      recipient?: string | null
    ): NewDefaultSaleRecipientEventFilter;
    NewDefaultSaleRecipient(
      recipient?: string | null
    ): NewDefaultSaleRecipientEventFilter;

    "NewOwner(address,address)"(
      prevOwner?: null,
      newOwner?: null
    ): NewOwnerEventFilter;
    NewOwner(prevOwner?: null, newOwner?: null): NewOwnerEventFilter;

    "PrimarySalesFeeUpdates(uint256)"(
      newFeeBps?: null
    ): PrimarySalesFeeUpdatesEventFilter;
    PrimarySalesFeeUpdates(newFeeBps?: null): PrimarySalesFeeUpdatesEventFilter;

    "RoyaltyForToken(uint256,address,uint256)"(
      tokenId?: BigNumberish | null,
      royaltyRecipient?: null,
      royaltyBps?: null
    ): RoyaltyForTokenEventFilter;
    RoyaltyForToken(
      tokenId?: BigNumberish | null,
      royaltyRecipient?: null,
      royaltyBps?: null
    ): RoyaltyForTokenEventFilter;

    "TokenMinted(address,uint256,string,uint256)"(
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      uri?: null,
      quantityMinted?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      mintedTo?: string | null,
      tokenIdMinted?: BigNumberish | null,
      uri?: null,
      quantityMinted?: null
    ): TokenMintedEventFilter;

    "TransfersRestricted(bool)"(
      restricted?: null
    ): TransfersRestrictedEventFilter;
    TransfersRestricted(restricted?: null): TransfersRestrictedEventFilter;
  };

  estimateGas: {
    mintTo(
      to: string,
      tokenId: BigNumberish,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSignature(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verify(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintTo(
      to: string,
      tokenId: BigNumberish,
      uri: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSignature(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      req: MintRequestStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
